{"mappings":";;;;;;;;;;;;;;;;ACIA,gBAAS;AAEF,KAAK,CAAC,yCAAe,IAAI,KAAK,GAAK,CAAC;IACzC,KAAK,EAAE,OAAO,EAAE,UAAU,IAAI,eAAQ,CAAC,KAAK,CAAC,KAAK;IAElD,KAAK,CAAC,aAAa,GAAG,kBAAW,EAC9B,OAAO,GAAK,CAAC;QACZ,UAAU,EAAE,KAAK,GAAK,CAAC;YACrB,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO;QAC9B,CAAC;IACH,CAAC,EACD,CAAC;QAAA,UAAU;IAAA,CAAC;IAEd,KAAK,CAAC,iBAAiB,GAAG,kBAAW,EAClC,QAAQ,GAAK,CAAC;QACb,UAAU,EAAE,KAAK,GAAK,CAAC;YACrB,QAAQ,CAAC,OAAO,EAAE,GAAG,GAAK,CAAC;gBACzB,MAAM,CAAC,KAAK,CAAC,GAAG;YAClB,CAAC;QACH,CAAC;IACH,CAAC,EACD,CAAC;QAAA,UAAU;IAAA,CAAC;IAGd,EAA6E,AAA7E,2EAA6E;IAC7E,KAAK,EAAE,UAAU,EAAE,aAAa,IAAI,YAAK,CAAC,QAAQ,CAAC,CAAC;WAC/C,OAAO;uBACV,aAAa;2BACb,iBAAiB;IACnB,CAAC;IACD,gBAAS,KAAO,CAAC;QACf,aAAa,CAAC,CAAC;eAAI,OAAO;2BAAE,aAAa;+BAAE,iBAAiB;QAAC,CAAC;IAChE,CAAC,EAAE,CAAC;QAAA,OAAO;QAAE,aAAa;QAAE,iBAAiB;IAAA,CAAC;IAC9C,MAAM,0BACH,KAAK,CAAC,UAAU,CAAC,QAAQ;QAAC,KAAK,EAAE,UAAU;kBACzC,KAAK,CAAC,QAAQ;;AAGrB,CAAC;;;ADzCD,GAAuB;AAAvB,yCAAuB,GAAG,yCAAe","sources":["src/index.js","src/components/ContextHelper.js"],"sourcesContent":["import { ContextProvider } from \"./components/ContextHelper\";\nexports.ContextProvider = ContextProvider;\n","import { useCallback, useEffect } from \"react\";\nimport { enableES5 } from \"immer\";\nimport { useImmer } from \"use-immer\";\nimport React from \"react\";\nenableES5();\n\nexport const ContextProvider = (props) => {\n  const [context, setContext] = useImmer(props.value);\n\n  const updateContext = useCallback(\n    (toMerge) => {\n      setContext((draft) => {\n        Object.assign(draft, toMerge);\n      });\n    },\n    [setContext],\n  );\n  const removeFromContext = useCallback(\n    (toDelete) => {\n      setContext((draft) => {\n        toDelete.forEach((key) => {\n          delete draft[key];\n        });\n      });\n    },\n    [setContext],\n  );\n\n  //prevents a rerender in consumers every time the Provider's parent rerenders\n  const [contextObj, setContextObj] = React.useState({\n    ...context,\n    updateContext,\n    removeFromContext,\n  });\n  useEffect(() => {\n    setContextObj({ ...context, updateContext, removeFromContext });\n  }, [context, updateContext, removeFromContext]);\n  return (\n    <props.contextObj.Provider value={contextObj}>\n      {props.children}\n    </props.contextObj.Provider>\n  );\n};\n"],"names":[],"version":3,"file":"module.js.map"}